{"ast":null,"code":"function easing(time) {\n  return 1 - --time * time * time * time;\n}\n\n;\n/**\n * Given a start/end point of a scroll and time elapsed, calculate the scroll position we should be at\n * @param {Number} start - the initial value\n * @param {Number} stop - the final desired value\n * @param {Number} elapsed - the amount of time elapsed since we started animating\n * @param {Number} - duration - the duration of the animation\n * @return {Number} - The value we should use on the next tick\n */\n\nfunction getValue(start, end, elapsed, duration) {\n  if (elapsed > duration) return end;\n  return start + (end - start) * easing(elapsed / duration);\n}\n\n;\n/**\n * Smoothly animate between two values\n * @param {Number} fromValue - the initial value\n * @param {Function} onUpdate - A function that is called on each tick\n * @param {Function} onComplete - A callback that is fired once the scroll animation ends\n * @param {Number} duration - the desired duration of the scroll animation\n */\n\nexport default function animate(_ref) {\n  var fromValue = _ref.fromValue,\n      toValue = _ref.toValue,\n      onUpdate = _ref.onUpdate,\n      onComplete = _ref.onComplete,\n      _ref$duration = _ref.duration,\n      duration = _ref$duration === undefined ? 600 : _ref$duration;\n  var startTime = performance.now();\n\n  var tick = function tick() {\n    var elapsed = performance.now() - startTime;\n    window.requestAnimationFrame(function () {\n      return onUpdate(getValue(fromValue, toValue, elapsed, duration), // Callback\n      elapsed <= duration ? tick : onComplete);\n    });\n  };\n\n  tick();\n}\n;","map":{"version":3,"sources":["E:/react app/my-app/node_modules/react-infinite-calendar/es/utils/animate.js"],"names":["easing","time","getValue","start","end","elapsed","duration","animate","_ref","fromValue","toValue","onUpdate","onComplete","_ref$duration","undefined","startTime","performance","now","tick","window","requestAnimationFrame"],"mappings":"AAAA,SAASA,MAAT,CAAgBC,IAAhB,EAAsB;AACpB,SAAO,IAAI,EAAEA,IAAF,GAASA,IAAT,GAAgBA,IAAhB,GAAuBA,IAAlC;AACD;;AAAA;AAED;;;;;;;;;AAQA,SAASC,QAAT,CAAkBC,KAAlB,EAAyBC,GAAzB,EAA8BC,OAA9B,EAAuCC,QAAvC,EAAiD;AAC/C,MAAID,OAAO,GAAGC,QAAd,EAAwB,OAAOF,GAAP;AACxB,SAAOD,KAAK,GAAG,CAACC,GAAG,GAAGD,KAAP,IAAgBH,MAAM,CAACK,OAAO,GAAGC,QAAX,CAArC;AACD;;AAAA;AAED;;;;;;;;AAOA,eAAe,SAASC,OAAT,CAAiBC,IAAjB,EAAuB;AACpC,MAAIC,SAAS,GAAGD,IAAI,CAACC,SAArB;AAAA,MACIC,OAAO,GAAGF,IAAI,CAACE,OADnB;AAAA,MAEIC,QAAQ,GAAGH,IAAI,CAACG,QAFpB;AAAA,MAGIC,UAAU,GAAGJ,IAAI,CAACI,UAHtB;AAAA,MAIIC,aAAa,GAAGL,IAAI,CAACF,QAJzB;AAAA,MAKIA,QAAQ,GAAGO,aAAa,KAAKC,SAAlB,GAA8B,GAA9B,GAAoCD,aALnD;AAOA,MAAIE,SAAS,GAAGC,WAAW,CAACC,GAAZ,EAAhB;;AAEA,MAAIC,IAAI,GAAG,SAASA,IAAT,GAAgB;AACzB,QAAIb,OAAO,GAAGW,WAAW,CAACC,GAAZ,KAAoBF,SAAlC;AAEAI,IAAAA,MAAM,CAACC,qBAAP,CAA6B,YAAY;AACvC,aAAOT,QAAQ,CAACT,QAAQ,CAACO,SAAD,EAAYC,OAAZ,EAAqBL,OAArB,EAA8BC,QAA9B,CAAT,EACf;AACAD,MAAAA,OAAO,IAAIC,QAAX,GAAsBY,IAAtB,GAA6BN,UAFd,CAAf;AAGD,KAJD;AAKD,GARD;;AAUAM,EAAAA,IAAI;AACL;AAAA","sourcesContent":["function easing(time) {\n  return 1 - --time * time * time * time;\n};\n\n/**\n * Given a start/end point of a scroll and time elapsed, calculate the scroll position we should be at\n * @param {Number} start - the initial value\n * @param {Number} stop - the final desired value\n * @param {Number} elapsed - the amount of time elapsed since we started animating\n * @param {Number} - duration - the duration of the animation\n * @return {Number} - The value we should use on the next tick\n */\nfunction getValue(start, end, elapsed, duration) {\n  if (elapsed > duration) return end;\n  return start + (end - start) * easing(elapsed / duration);\n};\n\n/**\n * Smoothly animate between two values\n * @param {Number} fromValue - the initial value\n * @param {Function} onUpdate - A function that is called on each tick\n * @param {Function} onComplete - A callback that is fired once the scroll animation ends\n * @param {Number} duration - the desired duration of the scroll animation\n */\nexport default function animate(_ref) {\n  var fromValue = _ref.fromValue,\n      toValue = _ref.toValue,\n      onUpdate = _ref.onUpdate,\n      onComplete = _ref.onComplete,\n      _ref$duration = _ref.duration,\n      duration = _ref$duration === undefined ? 600 : _ref$duration;\n\n  var startTime = performance.now();\n\n  var tick = function tick() {\n    var elapsed = performance.now() - startTime;\n\n    window.requestAnimationFrame(function () {\n      return onUpdate(getValue(fromValue, toValue, elapsed, duration),\n      // Callback\n      elapsed <= duration ? tick : onComplete);\n    });\n  };\n\n  tick();\n};"]},"metadata":{},"sourceType":"module"}